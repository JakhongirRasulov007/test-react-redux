{"version":3,"sources":["redux/actionTypes.js","redux/actions.js","react/UserManager.jsx","react/Table.jsx","App.js","reportWebVitals.js","redux/reducers/dialogReducer.js","redux/reducers/rootReducer.js","redux/reducers/usersReducer.js","redux/store.js","index.js"],"names":["ADD_USER","GET_USERS","UPDATE_USER","DELETE_USER","TOGGLE_DIALOG","SELECT_ID","toggleDialog","dialogState","type","payload","useStyles","makeStyles","container","dialog","height","width","dialogContent","margin","display","flexDirection","justifyContent","alignItems","buttonContainer","marginTop","textFieldContainer","flexWrap","textField","updateButton","backgroundColor","color","cancelButton","marginLeft","connect","state","dialogReducer","selectedId","users","usersReducer","dispatch","addUser","user","toggle","useState","id","setId","name","setName","username","setUsername","email","setEmail","phone","setPhone","website","setWebsite","classes","useEffect","map","console","log","clearFields","className","Dialog","onClose","aria-labelledby","open","TextField","label","variant","value","onChange","e","target","required","error","DialogActions","Button","onClick","alert","columns","minWidth","align","format","toLocaleString","toFixed","root","maxHeight","buttonsWithPagination","createButton","borderRadius","boxShadow","tableRow","cursor","tableRowSelected","rows","select","selectId","getUsers","React","page","setPage","rowsPerPage","setRowsPerPage","selectedTableRowId","setSelectedTableRowId","a","axios","result","data","fetchData","Paper","TableContainer","Table","stickyHeader","aria-label","TableHead","TableRow","column","TableCell","style","TableBody","slice","row","hover","role","tabIndex","TablePagination","rowsPerPageOptions","component","count","length","onChangePage","event","newPage","onChangeRowsPerPage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","action","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","rootReducer","applyMiddleware","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.f821322b.chunk.js","sourcesContent":["export const ADD_USER = \"ADD_USER\";\r\nexport const GET_USERS = \"GET_USERS\";\r\nexport const UPDATE_USER = \"UPDATE_USER\";\r\nexport const DELETE_USER = \"DELETE_USER\";\r\n\r\nexport const TOGGLE_DIALOG = \"TOGGLE_DIALOG\";\r\nexport const SELECT_ID = \"SELECT_ID\";\r\n","import {\r\n  ADD_USER,\r\n  GET_USERS,\r\n  UPDATE_USER,\r\n  DELETE_USER,\r\n  TOGGLE_DIALOG,\r\n  SELECT_ID,\r\n} from \"./actionTypes\";\r\n\r\n// below are actions related to users\r\nexport const addUser = (user) => ({\r\n  type: ADD_USER,\r\n  payload: user,\r\n});\r\n\r\nexport const updateUser = (id) => ({\r\n  type: UPDATE_USER,\r\n  payload: id,\r\n});\r\n\r\nexport const getUsers = (users) => ({\r\n  type: GET_USERS,\r\n  payload: users,\r\n});\r\n\r\nexport const deleteUser = (id) => ({\r\n  type: DELETE_USER,\r\n  payload: id,\r\n});\r\n\r\n// above are actions related to users\r\n\r\n// below are actions related to dialog\r\n\r\nexport const toggleDialog = (dialogState) => {\r\n  return {\r\n    type: TOGGLE_DIALOG,\r\n    payload: dialogState,\r\n  };\r\n};\r\n\r\nexport const selectId = (id) => {\r\n  // console.log(\"selectedId in actions.js: \", id);\r\n  return {\r\n    type: SELECT_ID,\r\n    payload: id,\r\n  };\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  Button,\r\n  DialogActions,\r\n  makeStyles,\r\n  TextField,\r\n  Dialog,\r\n} from \"@material-ui/core\";\r\nimport { addUser, toggleDialog } from \"../redux/actions\";\r\n\r\nconst useStyles = makeStyles({\r\n  container: {},\r\n  dialog: {\r\n    height: \"100%\",\r\n    width: \"100%\",\r\n  },\r\n  dialogContent: {\r\n    margin: \"2rem\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  buttonContainer: {\r\n    marginTop: \"1rem\",\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  textFieldContainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    flexWrap: \"wrap\",\r\n    alignItems: \"center\",\r\n  },\r\n  textField: {\r\n    width: \"80%\",\r\n    marginTop: \"0.5rem\",\r\n  },\r\n\r\n  updateButton: {\r\n    backgroundColor: \"green\",\r\n    color: \"#dfdfdf\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"green\",\r\n    },\r\n  },\r\n  cancelButton: {\r\n    backgroundColor: \"red\",\r\n    marginLeft: \"0.4rem\",\r\n    color: \"#dfdfdf\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"red\",\r\n    },\r\n  },\r\n});\r\n\r\nfunction UserManager({ dialogState, toggle, addUser, selectedId, users }) {\r\n  const [id, setId] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [username, setUsername] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [website, setWebsite] = useState(\"\");\r\n\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    users.map((user) => {\r\n      if (user.id === selectedId) {\r\n        console.log(\"user.id in UserManager useEffect: \", user.id);\r\n        setId(user.id);\r\n      }\r\n    });\r\n    console.log(\"initialize for update in useEffect\", selectedId);\r\n  }, [selectedId, users]);\r\n\r\n  const handleClose = () => {};\r\n\r\n  const applyChange = () => {\r\n    if (\r\n      id === \"\" ||\r\n      name === \"\" ||\r\n      username === \"\" ||\r\n      email === \"\" ||\r\n      phone === \"\" ||\r\n      website === \"\"\r\n    ) {\r\n      alert(\"empty fields are not allowed\");\r\n    } else {\r\n      addUser({ id, name, username, email, phone, website });\r\n      toggle(dialogState);\r\n      clearFields();\r\n    }\r\n  };\r\n\r\n  const clearFields = () => {\r\n    setId(\"\");\r\n    setName(\"\");\r\n    setUsername(\"\");\r\n    setEmail(\"\");\r\n    setPhone(\"\");\r\n    setWebsite(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <Dialog\r\n        onClose={handleClose}\r\n        aria-labelledby=\"simple-dialog-title\"\r\n        open={dialogState}\r\n        className={classes.dialog}\r\n      >\r\n        <dialogContent className={classes.dialogContent}>\r\n          <TextField\r\n            id=\"id\"\r\n            label=\"id\"\r\n            variant=\"outlined\"\r\n            value={id}\r\n            onChange={(e) => setId(e.target.value)}\r\n            className={classes.textField}\r\n            required\r\n            error={id == \"\" || id == null}\r\n          />\r\n          <TextField\r\n            id=\"name\"\r\n            label=\"name\"\r\n            variant=\"outlined\"\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n            className={classes.textField}\r\n            required\r\n            error={name == \"\" || name == null}\r\n          />\r\n          <TextField\r\n            id=\"username\"\r\n            label=\"username\"\r\n            variant=\"outlined\"\r\n            value={username}\r\n            onChange={(e) => setUsername(e.target.value)}\r\n            className={classes.textField}\r\n            required\r\n            error={username == \"\" || username == null}\r\n          />\r\n          <TextField\r\n            id=\"email\"\r\n            label=\"email\"\r\n            variant=\"outlined\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            className={classes.textField}\r\n            required\r\n            error={email == \"\" || email == null}\r\n          />\r\n          <TextField\r\n            id=\"phone\"\r\n            label=\"phone\"\r\n            variant=\"outlined\"\r\n            value={phone}\r\n            onChange={(e) => setPhone(e.target.value)}\r\n            className={classes.textField}\r\n            required\r\n            error={phone == \"\" || phone == null}\r\n          />\r\n          <TextField\r\n            id=\"website\"\r\n            label=\"website\"\r\n            variant=\"outlined\"\r\n            value={website}\r\n            onChange={(e) => setWebsite(e.target.value)}\r\n            className={classes.textField}\r\n            required\r\n            error={website == \"\" || website == null}\r\n          />\r\n        </dialogContent>\r\n\r\n        <DialogActions className={classes.buttonContainer}>\r\n          <Button\r\n            variant=\"contained\"\r\n            className={classes.updateButton}\r\n            onClick={() => applyChange()}\r\n          >\r\n            create a user\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            className={classes.cancelButton}\r\n            onClick={() => {\r\n              console.log(\"selectedId in UserManager: \", selectedId);\r\n              toggle(dialogState);\r\n            }}\r\n          >\r\n            cancel change\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    dialogState: state.dialogReducer.dialogState,\r\n    selectedId: state.dialogReducer.selectedId,\r\n    users: state.usersReducer,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addUser: (user) => dispatch(addUser(user)),\r\n    toggle: (dialogState) => dispatch(toggleDialog(dialogState)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserManager);\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport UserManager from \"./UserManager\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { getUsers, selectId, toggleDialog } from \"../redux/actions\";\r\nimport axios from \"axios\";\r\n\r\nconst columns = [\r\n  { id: \"id\", label: \"id\", minWidth: 50 },\r\n  { id: \"name\", label: \"Name\", minWidth: 170 },\r\n  { id: \"username\", label: \"username\", minWidth: 100 },\r\n  {\r\n    id: \"email\",\r\n    label: \"email\",\r\n    minWidth: 170,\r\n    align: \"center\",\r\n    format: (value) => value.toLocaleString(\"en-US\"),\r\n  },\r\n  {\r\n    id: \"phone\",\r\n    label: \"phone\",\r\n    minWidth: 170,\r\n    align: \"center\",\r\n    format: (value) => value.toLocaleString(\"en-US\"),\r\n  },\r\n  {\r\n    id: \"website\",\r\n    label: \"website\",\r\n    minWidth: 170,\r\n    align: \"right\",\r\n    format: (value) => value.toFixed(2),\r\n  },\r\n];\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  container: {\r\n    maxHeight: \"20rem\",\r\n  },\r\n  buttonsWithPagination: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  createButton: {\r\n    backgroundColor: \"green\",\r\n    color: \"#dfdfdf\",\r\n    borderRadius: \"50%\",\r\n    boxShadow: \"0.1rem 0.1rem 0.1rem yellow\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"green\",\r\n    },\r\n    \"&:active\": {\r\n      boxShadow: \"0.1rem 0.1rem 0.1rem transparent\",\r\n    },\r\n  },\r\n  updateButton: {\r\n    backgroundColor: \"yellow\",\r\n    borderRadius: \"50%\",\r\n    boxShadow: \"-0.1rem 0.1rem 0.1rem green\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"yellow\",\r\n    },\r\n    \"&:active\": {\r\n      boxShadow: \"-0.1rem 0.1rem 0.1rem transparent\",\r\n    },\r\n  },\r\n\r\n  tableRow: {\r\n    cursor: \"pointer\",\r\n  },\r\n  tableRowSelected: {\r\n    backgroundColor: \"yellow !important\",\r\n    color: \"green\",\r\n    cursor: \"pointer\",\r\n  },\r\n});\r\n\r\nfunction StickyHeadTable({\r\n  rows,\r\n  toggleDialog,\r\n  dialogState,\r\n  select,\r\n  getUsers,\r\n}) {\r\n  const classes = useStyles();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n  const [selectedTableRowId, setSelectedTableRowId] = useState(-1);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await axios(\"https://jsonplaceholder.typicode.com/users\");\r\n\r\n      console.log(result.data);\r\n      getUsers(result.data);\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <TableContainer className={classes.container}>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              {columns.map((column) => (\r\n                <TableCell\r\n                  key={column.id}\r\n                  align={column.align}\r\n                  style={{ minWidth: column.minWidth }}\r\n                >\r\n                  {column.label}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows\r\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n              .map((row) => {\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    tabIndex={-1}\r\n                    key={row.id}\r\n                    onClick={() => {\r\n                      setSelectedTableRowId(row.id);\r\n                      select(row.id);\r\n                    }}\r\n                    className={\r\n                      selectedTableRowId === row.id\r\n                        ? classes.tableRowSelected\r\n                        : classes.tableRow\r\n                    }\r\n                  >\r\n                    {columns.map((column) => {\r\n                      const value = row[column.id];\r\n                      return (\r\n                        <TableCell key={column.id} align={column.align}>\r\n                          {column.format && typeof value === \"number\"\r\n                            ? column.format(value)\r\n                            : value}\r\n                        </TableCell>\r\n                      );\r\n                    })}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <div className={classes.buttonsWithPagination}>\r\n        <Button\r\n          className={classes.createButton}\r\n          onClick={() => toggleDialog(dialogState)}\r\n        >\r\n          create\r\n        </Button>\r\n        {/* <Button\r\n          className={classes.updateButton}\r\n          onClick={() => {\r\n            toggleDialog(dialogState);\r\n            select(selectedTableRowId);\r\n          }}\r\n        >\r\n          update\r\n        </Button> */}\r\n        <TablePagination\r\n          rowsPerPageOptions={[1, 5, 10, 20, 100]}\r\n          component=\"div\"\r\n          count={rows.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </div>\r\n      <UserManager />\r\n    </Paper>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    rows: state.usersReducer,\r\n    dialogState: state.dialogReducer.dialogState,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    toggleDialog: (dialogState) => dispatch(toggleDialog(dialogState)),\r\n    select: (id) => dispatch(selectId(id)),\r\n    getUsers: (users) => dispatch(getUsers(users)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StickyHeadTable);\r\n","import Table from \"./react/Table\";\n\n// add searching\n// animation added\n// sorting\n\nfunction App() {\n  return (\n    <div>\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { SELECT_ID, TOGGLE_DIALOG } from \"../actionTypes\";\r\n\r\nconst INITIAL_STATE = {\r\n  dialogState: false,\r\n  selectedId: 1,\r\n};\r\n\r\nconst dialogReducer = (state = INITIAL_STATE, action) => {\r\n  console.log(\"action.type in dialogReducer: \", action.type);\r\n  console.log(\"action.payload in dialogReducer: \", action.payload);\r\n  switch (action.type) {\r\n    case TOGGLE_DIALOG: {\r\n      return {\r\n        ...state,\r\n        dialogState: !action.payload,\r\n      };\r\n    }\r\n    case SELECT_ID: {\r\n      return {\r\n        ...state,\r\n        selectId: action.payload,\r\n      };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default dialogReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport usersReducer from \"./usersReducer\";\r\nimport dialogReducer from \"./dialogReducer\";\r\n\r\nexport default combineReducers({ usersReducer, dialogReducer });\r\n","import { ADD_USER, GET_USERS, UPDATE_USER, DELETE_USER } from \"../actionTypes\";\r\n\r\nexport default function (state = [], action) {\r\n  switch (action.type) {\r\n    case ADD_USER: {\r\n      return [...state, action.payload];\r\n    }\r\n\r\n    case GET_USERS: {\r\n      return [...state, ...action.payload];\r\n    }\r\n\r\n    case UPDATE_USER: {\r\n      return state;\r\n    }\r\n\r\n    case DELETE_USER: {\r\n      return state;\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport rootReducer from \"./reducers/rootReducer\";\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport default createStore(rootReducer, composeEnhancers(applyMiddleware()));\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}